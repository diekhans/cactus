import os
from cgtscons import *

# clone to avoid modifying parent enviroment
Import("env",)
env = env.Clone()

libAddCactus(env)
libAddCPecan(env)
libAddSonLib(env)
libAddKyotoDatabase(env)

##
# cactusLib
##
env = env.Clone()
buildStaticLibrary(env, CACTUS_LIB_NAME, 
                   globSrcPaths(env, "api/src", "*.c"))

##
# blast
##
buildStaticLibrary(env, BLAST_LIB_NAME, 
                   "blast/src/blastAlignmentLib.c")
blastCProgs = ["cactus_blast_chunkFlowerSequences",  "cactus_convertAlignmentsToInternalNames",
               "cactus_blast_chunkSequences", "cactus_coverage",
               "cactus_blast_convertCoordinates", "cactus_stripUniqueIDs",
               "cactus_blast_sortAlignments"]
for b in blastCProgs:
    linkProgDir(env, None, "blast/src", [b+ ".c"])


##
# bar
##
linkProg(env, "cactus_bar", Glob("bar/src/*.c"))

##
# caf
##
buildStaticLibrary(env, STCAF_LIB_NAME, 
                   globSrcPaths(env, "caf/src", "*.c",
                                excludes=["cactus_caf.c"]))
linkProgDir(env, None, "caf/src/", ["cactus_caf.c"])

##
# check
##
linkProgDir(env, None, "check/src", ["cactus_check.c"])


##
# FIXME: TODO
# hal
# normalisation
# phylogeny
##

##
# pipeline
##
pipelineProgs = ["cactus_workflow_getFlowers",
                 "cactus_workflow_extendFlowers",
                 "cactus_workflow_flowerStats",
                 "cactus_workflow_convertAlignmentCoordinates",
                 "cactus_secondaryDatabase"]
for p in pipelineProgs:
    linkProgDir(env, None, "pipeline/src", [p + ".c"])

##
# preprocessor
##
#cactus_analyseAssembly cactus_covered_intervals
#preprocessor/src/

##
# reference
##
#reference/include/
#reference/src/

##
# setup
##
#setup/src/
